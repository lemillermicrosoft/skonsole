name: Generate PR Description

on:
  issue_comment:
    types: [created]

jobs:
  generate-pr-description:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/sk generate-pr-description')
    steps:
      - name: Get PR branch
        uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch

      - name: Set latest commit status as pending
        uses: myrotvorets/set-commit-status-action@master
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending

      # - name: Generate PR description
      #   uses: mkarle/skonsole-generate-pr-description@v1
      #   with:
      #     pull-request-number: ${{ github.event.issue.number }}
      #     pull-request-diff-url: ${{ github.event.issue.pull_request.diff_url }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     update-type:  ${{ contains(github.event.comment.body, 'replace') && 'replace' || (contains(github.event.comment.body, 'prefix') && 'prefix' || 'suffix') }}
      #   env: # Set Azure credentials secret as an input
      #     AZURE_OPENAI_CHAT_DEPLOYMENT_NAME: ${{ vars.AZURE_OPENAI_CHAT_DEPLOYMENT_NAME }}
      #     AZURE_OPENAI_API_ENDPOINT: ${{ secrets.AZURE_OPENAI_API_ENDPOINT }}
      #     AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}

      # Start generate-pr-description action
      - name: Setup .NET CLI
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 7.0.x

      - name: Install SKonsole
        run: dotnet tool install --global SKonsole --version 1.0.2
        shell: bash

      - name: Generate PR description  
        id: generate_description
        run: |  
            dotnet run pr description --outputFormat json --outputFile out.txt --diffInputFile ${{ github.event.issue.pull_request.diff_url }}
        shell: bash
        env: # Set Azure credentials secret as an input
            AZURE_OPENAI_CHAT_DEPLOYMENT_NAME: ${{ vars.AZURE_OPENAI_CHAT_DEPLOYMENT_NAME }}
            AZURE_OPENAI_API_ENDPOINT: ${{ secrets.AZURE_OPENAI_API_ENDPOINT }}
            AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}

      - name: Parse PR title
        id: parse_title
        run: echo "pr_title=$(jq -r '.Title' out.txt)" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Parse PR summary
        id: parse_summary
        run: echo "pr_summary=$(jq -r '.Summary' out.txt)" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Parse PR changes
        id: parse_changes
        run: |
          {
            echo 'pr_changes<<EOF'
            echo "$(jq -r '.Changes[]' out.txt | while read line; do echo "- $line"; done)"
            echo EOF
          } >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Create-Update PR
        uses: mkarle/pr-update@v1
        id: pr_update
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pr_title:  ${{ steps.parse_title.outputs.pr_title}}
          pr_number: ${{ github.event.issue.number }}
          pr_update_type: ${{ contains(github.event.comment.body, 'replace') && 'replace' || (contains(github.event.comment.body, 'prefix') && 'prefix' || 'suffix') }}
          pr_body: |
            ## Summary
            ${{ steps.parse_summary.outputs.pr_summary }}

            ## Changes
            ${{ steps.parse_changes.outputs.pr_changes }}

            ---
            *Powered by [Microsoft Semantic Kernel](https://github.com/microsoft/semantic-kernel)*
      
      # End generate-pr-description action

      - name: Set latest commit status as ${{ job.status }}
        uses: myrotvorets/set-commit-status-action@master
        if: always()
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}

      - name: Add comment to PR
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const name = '${{ github.workflow   }}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const success = '${{ job.status }}' === 'success';
            const body = `${name}: ${success ? 'succeeded ✅' : 'failed ❌'}\n${url}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })